# -*- encoding: utf8 -*-

# Экспоненциальный алгоритм
# Следует буквальному определению чисел Фибоначчи
# F(n) = 2 ** 0.694 * n
# T(n) = T(n-1) + T(n-2) + 3
# 3 - это две проверки и сложение
# Плюс два рекурсивных вызова
# При n=4, F(n) 6.849506276371654
# T(n) = 3 + T(3) + T(2) = 3 + (3 + T(2) + T(1)) + (3 + T(1) + T(0))
# T(n) = 9 + (3 + T(1) + T(0)) + 2 + 1 = 15 + 2 + 1 = 18
# T(n) > F(n)
# Видно, что алгоритм много раз вычисляет одно и тоже


def fib_1(n):
    if n == 0 or n == 1:
        return n
    return fib_1(n - 1) + fib_1(n - 2)

assert fib_1(6) == 8
assert fib_1(10) == 55
assert fib_1(12) == 144


# Полиноминальный алгоритм (линейный)
# Время работы = N
def fib_2(n):
    if n == 0:
        return n
    arr = [0, 1]
    for i in range(2, n + 1):
        arr.append(arr[i - 1] + arr[i - 2])
    return arr[n]

assert fib_2(6) == 8
assert fib_2(10) == 55
assert fib_2(12) == 144
